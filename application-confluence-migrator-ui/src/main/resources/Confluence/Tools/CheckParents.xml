<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="Confluence.Tools.CheckParents" locale="">
  <web>Confluence.Tools</web>
  <name>CheckParents</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Check Parents</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
println """= ${services.localization.render('confluence.migrator.postImportFixes.checkParents')} ="""
def escapetool = new org.xwiki.velocity.tools.EscapeTool()

def activeProfile = services.confluencemigrator.profile.activeProfile
def activeProfileDoc = xwiki.getDocument(activeProfile)
def space = activeProfileDoc.getValue('space')
def nb = activeProfileDoc.getValue('totalPages')

def fixParents = request.fixParents == 'true'
def buttonClassNames = 'button '
if(request.space &amp;&amp; request.space.trim() != '') {
  space = request.space
  buttonClassNames = 'btn btn-default float-left'
}
if (request.nb)
  nb = Integer.parseInt(request.nb)

if(!request.xpage) {
println """
{{html clean=false}}
  &lt;form action="" method="post" class="xform"&gt;
    &lt;div class="hidden"&gt;
      &lt;input type="hidden" name="check" value="true"&gt;
      &lt;input type="hidden" name="form_token" value="${services.csrf.getToken()}"&gt;
      &lt;input type="hidden" name="xredirect" value="${doc.getURL('view', '#step-5')}"&gt;
    &lt;/div&gt;
    &lt;dl&gt;
      &lt;dt&gt;
        &lt;label for="space"&gt;${escapetool.xml(services.localization.render("confluence.migrator.parents.space"))}&lt;/label&gt;
        &lt;span class="xHint"&gt;${escapetool.xml(services.localization.render("confluence.migrator.parents.space.hint"))}&lt;/span&gt;
      &lt;/dt&gt;
      &lt;dd&gt;
        &lt;input type="text" name="space" value="${escapetool.xml(space)}" /&gt;
      &lt;/dd&gt;
      &lt;dt&gt;
        &lt;label for="nb"&gt;${escapetool.xml(services.localization.render("confluence.migrator.parents.pagesnb"))}&lt;/label&gt;
        &lt;span class="xHint"&gt;${escapetool.xml(services.localization.render("confluence.migrator.parents.pagesnb.hint"))}&lt;/span&gt;
      &lt;/dt&gt;
      &lt;dd&gt;
        &lt;input type="text" name="nb" value="${escapetool.xml(nb)}" size="10" /&gt;
      &lt;/dd&gt;
    &lt;/dl&gt;
    &lt;input value="${services.localization.render('confluence.migrator.parents.checkgo')}" class="${buttonClassNames}" type="submit" /&gt;
  &lt;/form&gt;
"""

if(request.space &amp;&amp; request.space.trim() != '')
  println """
  &lt;form action="" method="post" class="xform"&gt;
    &lt;div class="hidden"&gt;
      &lt;input type="hidden" name="fixParents" value="true"&gt;
      &lt;input type="hidden" name="confirm" value="1"&gt;
      &lt;input type="hidden" name="form_token" value="${services.csrf.getToken()}"&gt;
      &lt;input type="hidden" name="xredirect" value="${doc.getURL('view', '#step-5')}"&gt;
      &lt;input type="hidden" name="space" value="${escapetool.xml(space)}" /&gt;
      &lt;input type="hidden" name="nb" value="${escapetool.xml(nb)}" size="10" /&gt;
    &lt;/div&gt;
    &lt;input id="fix-parents" value="${services.localization.render('confluence.migrator.parents.fixgo')}" class="button" type="submit" /&gt;
  &lt;/form&gt;
"""

println """
{{/html}}
"""
}

  public getNameProposal(name, space, log, newNameList, maxLength) {
    def splitname = name.replaceAll("/","_").replaceAll("[.]","_").replaceAll(" _ ", "_").replaceAll("[^\\dA-Za-z_ ]"," ").replaceAll('_', " ")replaceAll("\\s+"," ").split(' ')
    def newname = splitname[0]
    def scounter = 1
    while (newname.replaceAll("[0-9_]","")=="" || newname.size()&lt;20) {
      if (scounter&gt;5)
        break;
      if (scounter&gt;=splitname.size())
        break;
      if ((newname.size() + splitname[scounter].size()) &gt; maxLength)
        break;
      newname += " " + splitname[scounter]
      scounter++;
    }

    if (newname.endsWith("_")||newname.endsWith("_"))
     newname = newname.substring(0, newname.length()-1)

    def count = 1
    def newname2 = newname;
    while (newNameList.contains(newname2) || xwiki.exists(space + "." + newname2)) {
      newname2 = newname + "_" + count;
      count++;
      log.info("Duplicate found");
      duplicates++;
    }
    newNameList.add(newname2)
    return newname2;
   }

if (request.space) {
  if(request.fixParents == 'true') {

    // Fixing incomplete parents
    def nbreplace = 0;
    def list = xwiki.searchDocuments("where doc.parent like '%.%' and doc.space='${space}' and doc.parent not like '${space}.%'", nb, 0)
    println "Found ${list.size()} documents with incomplete parent references in space ${space}."
    for (item in list) {
      def itemdoc = xwiki.getDocument(item)
      def parent = (itemdoc==null) ? "" : itemdoc.parent
      if (parent.contains('\\.')) {
        def fullparent = services.model.serialize(services.model.resolveDocument(parent, "default", itemdoc.documentReference.parent), "local")
        println "* [[${item}]] ${xwiki.getDocument(item).parent}"
        if (fullparent!=parent) {
          println "** replace with parent: ${fullparent}"
          nbreplace++;
          if (request.confirm) {
            itemdoc.setParent(fullparent)
            itemdoc.save("Confluence importing: fix parent")
          }
        }
      }
    }

    println ""
    if(list.size() &gt; 0) {
      if(!request.xpage)
        println "Replaced ${nbreplace} parents."
      else
        println "Found ${nbreplace} parents to update."
    }

    // Fixing too long parents
    duplicates = 0
    def nbconversions = 0
    def nbfailed = 0
    def nbnotneeded = 0
    def newnamelist = []
    def log = services.logging.getLogger(doc.fullName)
    list = xwiki.search("select doc.name, doc.fullName, doc.parent from XWikiDocument as doc where doc.web='${space}' and ((length(doc.parent)&gt;200 and doc.parent not like '${request.space}%') or (length(doc.parent)&gt;200 and doc.parent like '${request.space}%')) order by doc.name", nb, 0)
    println "Number of too long parents: ${list.size()}"
    for (item in list) {
      def name = item[0]
      def fullName = item[1]
      def parent = item[2]
      println "* doc fullname: ${fullName}"
      println "** parent: ${parent}"
      def list2 = xwiki.searchDocuments("where doc.web='${space}' and doc.title=?", 0, 0, [ parent.replaceAll("\\\\", "") ])
      println "** ${list2.size()} ${list2}"
      if (list2.size()==1) {
        def realparentname = list2[0]
        if ((realparentname != parent) &amp;&amp; (realparentname != request.space + "." + parent)) {
          println "** real parent ${realparentname}"
          nbconversions++;
          if (request.confirm) {
            def itemdoc = xwiki.getDocument(fullName)
            itemdoc.setParent(realparentname)
            itemdoc.save("Restoring parent document")
          }
        } else {
          println "** same real parent ${realparentname}"        
        }
      } else {
        def itemparentdoc = xwiki.getDocument(request.space + "." + parent)
        if (itemparentdoc.isNew()) {
          println "** could not find parent. failed."
          if (request.confirm=="2") {
            def newparentName = getNameProposal(parent, space, log, newnamelist, 30)
            def newparentDoc = xwiki.getDocument(space + "." + newparentName);
            def newparentTitle = parent;
            if (parent.size()&gt;250)
              newparentTitle = parent.substring(0, 250);
            newparentDoc.setTitle(newparentTitle)
            newparentDoc.save("Confluence import missing document")
            def itemdoc = xwiki.getDocument(fullName)
            itemdoc.setParent(newparentName)
            itemdoc.save("New parent document")
          }
          nbfailed++;
        } else {
          println "** parent already exists. no conversion needed."
          nbnotneeded++;
        }
      }
    }

    if(request.xpage) {
      println "Number of too long parents: ${list.size()}"
      println "Number of conversions to perform: ${nbconversions}"
    } else {
      println "Number of too long parents fixed: ${list.size()}"
      println "Number of conversions fixed: ${nbconversions}"
      println "Number of conversions skipped: ${nbnotneeded}"
      println "Number of conversions failed: ${nbfailed}"
    }
  } else {
    // Searching for invalid parents
    def list = xwiki.search("select doc.fullName, doc.parent from XWikiDocument as doc where doc.parent &lt;&gt; '' and doc.parent is not null and concat('${space}.', doc.parent) not in (select doc2.fullName from XWikiDocument as doc2 where doc.space='${space}') and doc.parent not in (select doc2.fullName from XWikiDocument as doc2 where doc.space='${space}') and doc.space='${space}'", nb, 0)
    def result = "* Nb docs: ${list.size()}\n"
    println "* Nb docs: ${list.size()}"
    for (item in list) {
      def fullname = item[0]
      def parent = item[1]
      result += "* [[$fullname]] $parent\n"
      println "* [[$fullname]] with parent $parent"
    }

    def activeProfileSpaceReference = services.model.resolveSpace(activeProfileDoc.space)
    def resultDocRef = services.model.createDocumentReference("CheckParentsResults", activeProfileSpaceReference)
    def resultDoc = xwiki.getDocument(resultDocRef)
    resultDoc.setContent(result)
    resultDoc.save("Saving check parent results")
    if(request.xpage != 'plain')
      println """If the script is too long, the results will be displayed in [[${resultDoc}]]."""
  }
}
{{/groovy}}</content>
</xwikidoc>
