<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Confluence.Tools.LongPageNames" locale="">
  <web>Confluence.Tools</web>
  <name>LongPageNames</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Long Page Names Handling</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{job id="confluence/longpagename" start="{{velocity~}~}$!{request.confirm}{{/velocity~}~}"}}
{{groovy}}
  import org.xwiki.logging.LogLevel;

  def maxLength = 25
  def log = services.logging.getLogger(doc.fullName)
  public getNameProposal(name, space, log, newNameList, maxLength) {
    def splitname = name.replaceAll("/","_").replaceAll("[.]","_").replaceAll(" _ ", "_").replaceAll("[^\\dA-Za-z_ ]"," ").replaceAll('_', " ")replaceAll("\\s+"," ").split(' ')
    def newname = splitname[0]
    def scounter = 1
    while (newname.replaceAll("[0-9_]","")=="" || newname.size()&lt;20) {
      if (scounter&gt;5)
        break;
      if (scounter&gt;=splitname.size())
        break;
      if ((newname.size() + splitname[scounter].size()) &gt; maxLength)
        break;
      newname += " " + splitname[scounter]
      scounter++;
    }

    if (newname.endsWith("_")||newname.endsWith("_"))
     newname = newname.substring(0, newname.length()-1)

    def count = 1
    def newname2 = newname;
    while (newNameList.contains(newname2) || xwiki.exists(space + "." + newname2)) {
      newname2 = newname + "_" + count;
      count++;
      log.info("Duplicate found");
      duplicates++;
    }
    newNameList.add(newname2)
    return newname2;
   }

   public rename(log, services, xwiki, space, testRun, nb, maxLength) {
    newNameList = []
    duplicates = 0;
    converted = 0;
    if (!testRun)
      log.info("Performing real renames")
    else
      log.info("Performing a test run")

    services.logging.setLevel(doc.fullName, LogLevel.INFO);
    services.progress.pushLevel(2);
    services.progress.startStep();
    services.progress.pushLevel(1);
    def sql = "select doc.name, doc.fullName from XWikiDocument as doc where doc.web='${space}' and length(doc.name)&gt;${maxLength} order by doc.name";
    log.info("Running query: ${sql}")
    def list = xwiki.search(sql, nb, 0)
    services.progress.popLevel();
    services.progress.endStep();
    services.progress.startStep();
    services.progress.pushLevel(list.size());
    for (item in list) {
     services.progress.startStep();
     try {
     def name = item[0]
     def fullName = item[1]
     log.info("Document name: ${fullName}")
     def newname = getNameProposal(name, space, log, newNameList, maxLength)
     log.info("New name proposal: ${newname}")
     if (!testRun &amp;&amp; (newname!=name) &amp;&amp;(newname.size()&lt;name.size())) {
       converted++;
       log.info("Renaming page " + converted)
       def itemdoc =  xwiki.getDocument(fullName)
       def scontent = itemdoc.getContent()
       def scontent2 = scontent.replaceAll("\\[\\[user:", "[[mailto:")
       if (scontent != scontent2) {
         itemdoc.setContent(scontent2)
         itemdoc.save("Replacing user link with mailto links")
         itemdoc =  xwiki.getDocument(fullName)
       }

       def stitle = itemdoc.getTitle();
       itemdoc.rename(space + "." + newname);
       newdoc = xwiki.getDocument(space + "." + newname)
       if (newdoc.getTitle()!=stitle) {
         newdoc.setTitle(stitle)
         newdoc.save("Restoring title after rename")
         log.info("Restoring title to ${stitle}")
       }
     } else if (!testRun) {
       log.info("Not Renaming page")
     }
     } catch(e) {
       log.error("Exception on page handling", e)
     }
     services.progress.endStep();
    }
    services.progress.popLevel();
    services.progress.endStep();
    services.progress.popLevel();
    log.info("Number of too long names: ${list.size()}")
    log.info("Number converted: ${converted}")
    log.info("Found duplicated: ${duplicates}")
   }

  try {
   def space = 'KHNYG';
   def nb = 1000;
   def testRun = 1;

   if (request.nb) {
     nb = Integer.parseInt(request.nb)
   }

   log.info("Space: ${space}")
   log.info("Nb: ${nb}")
   log.info("Test Run: ${testRun}")
   rename(log, services, xwiki, request.space, request.testRun, nb, maxLength)
  } catch (e) {
   log.error("Problem running job", e)
   e.printStackTrace();
  }
{{/groovy}}
{{/job}}

{{velocity}}
#if ("$request.confirm" != 'true')
 #set($space = "")
 #if($request.space)
  #set($space = $request.space)
 #end
 #set($nb = "100")
 #if($request.nb)
  #set($nb = $request.nb)
 #end
{{html clean=false}}
&lt;form action=""&gt;
Space name: &lt;input type="text" name="space" value="${escapetool.xml($space)}" size="60" /&gt;&lt;br /&gt;
Number of docs: &lt;input type="text" name="nb" value="${escapetool.xml($nb)}" size="10" /&gt;&lt;br /&gt;
&lt;input name="testRun" type="checkbox" value="1" checked /&gt; Test run only
&lt;input name="confirm" type="hidden" value="true" /&gt;
&lt;br /&gt;
&lt;input name="submit" type="submit" value="Go" class="button" /&gt;
&lt;/form&gt;
{{/html}}
#else
 $response.sendRedirect($doc.getURL("view"))
#end
{{/velocity}}</content>
</xwikidoc>
